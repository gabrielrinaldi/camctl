#!/usr/bin/env python3

import hid
from time import sleep
import argparse

class CAM:
	def __init__(self, vid, pid):
		self.vendor = vid
		self.product = pid
		self._find()

	def _find(self):
		self.device = hid.device(self.vendor, self.product)

	def claim(self):
		print('Detaching kernel driver..')
		self.device.open(self.vendor, self.product)

	def declaim(self):
		print('Reattaching kernel driver..')
		self.device.close()

	def fan(self, speed):
		print('Setting fan speed to {}..'.format(speed))
		self.device.write([2, 77, 0, 0, speed, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

	def pump(self, speed):
		print('Setting pump speed to {}..'.format(speed))
		self.device.write([2, 77, 64, 0, speed, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

	def status(self):
		raw_status = self.device.read(0x81, 64)

		if len(raw_status) >= 7:
			temperature = raw_status[1] + raw_status[2] / 10
			fan = raw_status[3] << 8 | raw_status[4]
			pump = raw_status[5] << 8 | raw_status[6]

			print('Temperature: {}ÂºC'.format(temperature))
			print('Fan: {} RPM'.format(fan))
			print('Pump: {} RPM'.format(pump))
		else:
			self.status()

# Change these if they differ from yours
# See lsusb (e.g. Bus 001 Device 004: ID 1e71:170e NZXT)
vid = 0x1e71
pid = 0x170e

parser = argparse.ArgumentParser()
parser.add_argument('-f', '--fanspeed', dest='fanspeed', type=int, default=None, help="Fan speed between 10 - 100")
parser.add_argument('-p', '--pumpspeed', dest='pumpspeed', type=int, default=None, help="Pump speed between 10 - 100")
args = parser.parse_args()

if args.fanspeed:
	if args.fanspeed < 25 or args.fanspeed > 100:
		print('Fan speed must be between 10 - 100')
		sys.exit(0)
if args.pumpspeed:
	if args.pumpspeed < 60 or args.pumpspeed > 100:
		print('Pump speed must be between 60 - 100')
		sys.exit(0)
try:
	cam = CAM(vid, pid)
	cam.claim()

	if args.fanspeed:
		cam.fan(args.fanspeed)
	if args.pumpspeed:
		cam.pump(args.pumpspeed)

	cam.status()
	cam.declaim()
except Exception as e:
	cam.declaim()
	raise(e)
